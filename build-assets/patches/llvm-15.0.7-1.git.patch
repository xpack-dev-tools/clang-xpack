From e3b43c0a04242ece75904e0c447b61a0bdefd0fa Mon Sep 17 00:00:00 2001
From: Liviu Ionescu <ilg@livius.net>
Date: Sun, 11 Jul 2021 11:43:48 +0300
Subject: [PATCH] clang: add /Library/... to headers search path

Recent macOS releases also use:
/Library/Developer/CommandLineTools/usr/include/c++/v1
---
 clang/lib/Driver/ToolChains/Darwin.cpp | 12 ++++++++++++
 1 file changed, 12 insertions(+)

diff --git a/clang/lib/Driver/ToolChains/Darwin.cpp b/clang/lib/Driver/ToolChains/Darwin.cpp
index bada811daadf..e6414a834432 100644
--- a/clang/lib/Driver/ToolChains/Darwin.cpp
+++ b/clang/lib/Driver/ToolChains/Darwin.cpp
@@ -2367,6 +2367,7 @@ void DarwinClang::AddClangCXXStdlibIncludeArgs(
     // On Darwin, libc++ can be installed in one of the following two places:
     // 1. Alongside the compiler in         <install>/include/c++/v1
     // 2. In a SDK (or a custom sysroot) in <sysroot>/usr/include/c++/v1
+    // 3. In /Library/Developer/CommandLineTools/usr/include/c++/v1
     //
     // The precendence of paths is as listed above, i.e. we take the first path
     // that exists. Also note that we never include libc++ twice -- we take the
@@ -2399,6 +2400,17 @@ void DarwinClang::AddClangCXXStdlibIncludeArgs(
                    << "\"\n";
     }

+    // Otherwise, check for (3)
+    llvm::SmallString<128> CLT =
+      StringRef("/Library/Developer/CommandLineTools/usr/include/c++/v1");
+    if (getVFS().exists(CLT)) {
+      addSystemInclude(DriverArgs, CC1Args, CLT);
+      return;
+    } else if (DriverArgs.hasArg(options::OPT_v)) {
+      llvm::errs() << "ignoring nonexistent directory \"" << CLT
+                   << "\"\n";
+    }
+
     // Otherwise, don't add any path.
     break;
   }
--
2.37.1 (Apple Git-137.1)

diff --git a/llvm/runtimes/CMakeLists.txt b/llvm/runtimes/CMakeLists.txt
--- a/llvm/runtimes/CMakeLists.txt
+++ b/llvm/runtimes/CMakeLists.txt
@@ -60,14 +60,22 @@
   endforeach()
 endfunction()

+macro(set_enable_per_target_runtime_dir)
+  # May have been set by llvm/CMakeLists.txt.
+  if (NOT DEFINED LLVM_ENABLE_PER_TARGET_RUNTIME_DIR)
+    # AIX should fold 32-bit & 64-bit arch libraries into a single archive.
+    if (LLVM_TARGET_TRIPLE MATCHES "aix")
+      set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR OFF)
+    else()
+      set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR ON)
+    endif()
+  endif()
+endmacro()
+
 function(builtin_default_target compiler_rt_path)
   cmake_parse_arguments(ARG "" "" "DEPENDS" ${ARGN})

-  set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default ON)
-  # AIX should fold 32-bit & 64-bit arch libraries into a single archive.
-  if (LLVM_TARGET_TRIPLE MATCHES "aix")
-    set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default OFF)
-  endif()
+  set_enable_per_target_runtime_dir()

   llvm_ExternalProject_Add(builtins
                            ${compiler_rt_path}/lib/builtins
@@ -75,7 +83,7 @@
                            CMAKE_ARGS -DLLVM_LIBRARY_OUTPUT_INTDIR=${LLVM_LIBRARY_DIR}
                                       -DLLVM_RUNTIME_OUTPUT_INTDIR=${LLVM_TOOLS_BINARY_DIR}
                                       -DLLVM_DEFAULT_TARGET_TRIPLE=${LLVM_TARGET_TRIPLE}
-                                      -DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=${LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default}
+                                      -DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=${LLVM_ENABLE_PER_TARGET_RUNTIME_DIR}
                                       -DCMAKE_C_COMPILER_WORKS=ON
                                       -DCMAKE_ASM_COMPILER_WORKS=ON
                                       ${COMMON_CMAKE_ARGS}
@@ -217,11 +225,7 @@
     list(APPEND test_targets runtimes-test-depends check-runtimes)
   endif()

-  set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default ON)
-  # AIX should fold 32-bit & 64-bit arch libraries into a single archive.
-  if (LLVM_TARGET_TRIPLE MATCHES "aix")
-    set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default OFF)
-  endif()
+  set_enable_per_target_runtime_dir()

   llvm_ExternalProject_Add(runtimes
                            ${CMAKE_CURRENT_SOURCE_DIR}/../../runtimes
@@ -231,7 +235,7 @@
                                       -DLLVM_INCLUDE_TESTS=${LLVM_INCLUDE_TESTS}
                                       -DLLVM_DEFAULT_TARGET_TRIPLE=${LLVM_TARGET_TRIPLE}
                                       -DLLVM_ENABLE_PROJECTS_USED=${LLVM_ENABLE_PROJECTS_USED}
-                                      -DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=${LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default}
+                                      -DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=${LLVM_ENABLE_PER_TARGET_RUNTIME_DIR}
                                       -DLLVM_BUILD_TOOLS=${LLVM_BUILD_TOOLS}
                                       -DCMAKE_C_COMPILER_WORKS=ON
                                       -DCMAKE_CXX_COMPILER_WORKS=ON
@@ -348,6 +352,8 @@
     list(APPEND ${name}_extra_args -DLLVM_USE_LINKER=${LLVM_USE_LINKER})
   endif()

+  set_enable_per_target_runtime_dir()
+
   llvm_ExternalProject_Add(runtimes-${name}
                            ${CMAKE_CURRENT_SOURCE_DIR}/../../runtimes
                            DEPENDS ${${name}_deps}
@@ -356,7 +362,7 @@
                                       -DLLVM_INCLUDE_TESTS=${LLVM_INCLUDE_TESTS}
                                       -DLLVM_DEFAULT_TARGET_TRIPLE=${target}
                                       -DLLVM_ENABLE_PROJECTS_USED=${LLVM_ENABLE_PROJECTS_USED}
-                                      -DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=ON
+                                      -DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=${LLVM_ENABLE_PER_TARGET_RUNTIME_DIR}
                                       -DCMAKE_C_COMPILER_WORKS=ON
                                       -DCMAKE_CXX_COMPILER_WORKS=ON
                                       -DCMAKE_ASM_COMPILER_WORKS=ON


diff --git a/llvm/runtimes/CMakeLists.txt b/llvm/runtimes/CMakeLists.txt
--- a/llvm/runtimes/CMakeLists.txt
+++ b/llvm/runtimes/CMakeLists.txt
@@ -96,20 +96,35 @@
                            ${EXTRA_ARGS})
 endfunction()

-function(builtin_register_target compiler_rt_path target)
-  cmake_parse_arguments(ARG "" "" "DEPENDS" ${ARGN})
-
-  check_apple_target(${target} builtin)
-
+# Find variables with names of the form:
+# ${kind}_${target}_<runtimes cmake option>
+# Rename them so they can be passed directly to the runtime or builtins that
+# they apply to.
+#
+# For example:
+# RUNTIMES_armv8l-unknown-linux-gnueabihf_COMPILER_RT_BUILD_GWP_ASAN=OFF
+# Would be changed to:
+# COMPILER_RT_BUILD_GWP_ASAN=OFF
+# So it can be passed directly to compiler-rt.
+function (get_extra_cmake_args kind target)
   get_cmake_property(variableNames VARIABLES)
   foreach(variableName ${variableNames})
-    string(FIND "${variableName}" "BUILTINS_${target}" out)
+    string(FIND "${variableName}" "${kind}_${target}" out)
     if("${out}" EQUAL 0)
-      string(REPLACE "BUILTINS_${target}_" "" new_name ${variableName})
+      string(REPLACE "${kind}_${target}_" "" new_name ${variableName})
       string(REPLACE ";" "|" new_value "${${variableName}}")
       list(APPEND ${target}_extra_args "-D${new_name}=${new_value}")
     endif()
   endforeach()
+  set(${target}_extra_args ${${target}_extra_args} PARENT_SCOPE)
+endfunction()
+
+function(builtin_register_target compiler_rt_path target)
+  cmake_parse_arguments(ARG "" "" "DEPENDS" ${ARGN})
+
+  check_apple_target(${target} builtin)
+
+  get_extra_cmake_args("BUILTINS" ${target})

   llvm_ExternalProject_Add(builtins-${target}
                            ${compiler_rt_path}/lib/builtins
@@ -199,7 +214,7 @@
 endforeach()

 function(runtime_default_target)
-  cmake_parse_arguments(ARG "" "" "DEPENDS;PREFIXES" ${ARGN})
+  cmake_parse_arguments(ARG "" "" "DEPENDS;PREFIXES;CMAKE_ARGS" ${ARGN})

   include(${LLVM_BINARY_DIR}/runtimes/Components.cmake OPTIONAL)
   set(SUB_CHECK_TARGETS ${SUB_CHECK_TARGETS} PARENT_SCOPE)
@@ -225,6 +240,8 @@
     list(APPEND test_targets runtimes-test-depends check-runtimes)
   endif()

+  get_extra_cmake_args("RUNTIMES" ${LLVM_TARGET_TRIPLE})
+
   set_enable_per_target_runtime_dir()

   llvm_ExternalProject_Add(runtimes
@@ -242,6 +259,7 @@
                                       -DCMAKE_ASM_COMPILER_WORKS=ON
                                       ${COMMON_CMAKE_ARGS}
                                       ${RUNTIMES_CMAKE_ARGS}
+                                      ${${LLVM_TARGET_TRIPLE}_extra_args}
                            PASSTHROUGH_PREFIXES LLVM_ENABLE_RUNTIMES
                                                 LLVM_USE_LINKER
                                                 ${ARG_PREFIXES}


