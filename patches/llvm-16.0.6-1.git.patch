From ab8d4f5a122fde5740f8c084c8165f51a26c93c7 Mon Sep 17 00:00:00 2001
From: Sam James <sam@gentoo.org>
Date: Tue, 6 Jun 2023 02:08:01 +0100
Subject: [PATCH] [CMake] Quote variables where "TARGET" may be a value

In CMake, "TARGET" is a special keyword. But it's also an LLVM component, which
means downstreams may request "target" or "TARGET" from CMake. Quote such input
so "TARGET" is interpreted as a string rather than a keyword.

This is a followup to 75a0502fe0053c72b57b61143a55600814d931fd (D150884).

Fixes Meson's test suite and an issue which manifested identically to #61436
but appears to have been a slightly different problem.

Bug: https://github.com/mesonbuild/meson/issues/11642
Bug: https://github.com/llvm/llvm-project/issues/61436

Reviewed By: tstellar

Differential Revision: https://reviews.llvm.org/D152121
---
 llvm/cmake/modules/LLVM-Config.cmake | 30 ++++++++++++++--------------
 1 file changed, 15 insertions(+), 15 deletions(-)

diff --git a/llvm/cmake/modules/LLVM-Config.cmake b/llvm/cmake/modules/LLVM-Config.cmake
index ae082c6ae5202c..96ccf20aa89bdd 100644
--- a/llvm/cmake/modules/LLVM-Config.cmake
+++ b/llvm/cmake/modules/LLVM-Config.cmake
@@ -134,7 +134,7 @@ function(llvm_expand_pseudo_components out_components)
   endif()
   foreach(c ${link_components})
     # add codegen, asmprinter, asmparser, disassembler
-    if(${c} IN_LIST LLVM_TARGETS_TO_BUILD)
+    if("${c}" IN_LIST LLVM_TARGETS_TO_BUILD)
       if(LLVM${c}CodeGen IN_LIST LLVM_AVAILABLE_LIBS)
         list(APPEND expanded_components "${c}CodeGen")
       else()
@@ -149,48 +149,48 @@ function(llvm_expand_pseudo_components out_components)
           list(APPEND expanded_components "${c}${subcomponent}")
         endif()
       endforeach()
-    elseif( c STREQUAL "nativecodegen" )
+    elseif("${c}" STREQUAL "nativecodegen" )
       foreach(subcomponent IN ITEMS CodeGen Desc Info)
         if(LLVM${LLVM_NATIVE_ARCH}${subcomponent} IN_LIST LLVM_AVAILABLE_LIBS)
           list(APPEND expanded_components "${LLVM_NATIVE_ARCH}${subcomponent}")
         endif()
       endforeach()
-    elseif( c STREQUAL "AllTargetsCodeGens" )
+    elseif("${c}" STREQUAL "AllTargetsCodeGens" )
       # Link all the codegens from all the targets
       foreach(t ${LLVM_TARGETS_TO_BUILD})
         if( TARGET LLVM${t}CodeGen)
           list(APPEND expanded_components "${t}CodeGen")
         endif()
       endforeach(t)
-    elseif( c STREQUAL "AllTargetsAsmParsers" )
+    elseif("${c}" STREQUAL "AllTargetsAsmParsers" )
       # Link all the asm parsers from all the targets
       foreach(t ${LLVM_TARGETS_TO_BUILD})
         if(LLVM${t}AsmParser IN_LIST LLVM_AVAILABLE_LIBS)
           list(APPEND expanded_components "${t}AsmParser")
         endif()
       endforeach(t)
-    elseif( c STREQUAL "AllTargetsDescs" )
+    elseif( "${c}" STREQUAL "AllTargetsDescs" )
       # Link all the descs from all the targets
       foreach(t ${LLVM_TARGETS_TO_BUILD})
         if(LLVM${t}Desc IN_LIST LLVM_AVAILABLE_LIBS)
           list(APPEND expanded_components "${t}Desc")
         endif()
       endforeach(t)
-    elseif( c STREQUAL "AllTargetsDisassemblers" )
+    elseif("${c}" STREQUAL "AllTargetsDisassemblers" )
       # Link all the disassemblers from all the targets
       foreach(t ${LLVM_TARGETS_TO_BUILD})
         if(LLVM${t}Disassembler IN_LIST LLVM_AVAILABLE_LIBS)
           list(APPEND expanded_components "${t}Disassembler")
         endif()
       endforeach(t)
-    elseif( c STREQUAL "AllTargetsInfos" )
+    elseif("${c}" STREQUAL "AllTargetsInfos" )
       # Link all the infos from all the targets
       foreach(t ${LLVM_TARGETS_TO_BUILD})
         if(LLVM${t}Info IN_LIST LLVM_AVAILABLE_LIBS)
           list(APPEND expanded_components "${t}Info")
         endif()
       endforeach(t)
-    elseif( c STREQUAL "AllTargetsMCAs" )
+    elseif("${c}" STREQUAL "AllTargetsMCAs" )
       # Link all the TargetMCAs from all the targets
       foreach(t ${LLVM_TARGETS_TO_BUILD})
         if( TARGET LLVM${t}TargetMCA )
@@ -222,7 +222,7 @@ function(llvm_map_components_to_libnames out_libs)
   # process target dependencies.
   if(NOT LLVM_TARGETS_CONFIGURED)
     foreach(c ${link_components})
-      is_llvm_target_specifier(${c} iltl_result ALL_TARGETS)
+      is_llvm_target_specifier("${c}" iltl_result ALL_TARGETS)
       if(iltl_result)
         message(FATAL_ERROR "Specified target library before target registration is complete.")
       endif()
@@ -250,13 +250,13 @@ function(llvm_map_components_to_libnames out_libs)
     if(c_rename)
         set(c ${c_rename})
     endif()
-    if( c STREQUAL "native" )
+    if("${c}" STREQUAL "native" )
       # already processed
-    elseif( c STREQUAL "backend" )
+    elseif("${c}" STREQUAL "backend" )
       # same case as in `native'.
-    elseif( c STREQUAL "engine" )
+    elseif("${c}" STREQUAL "engine" )
       # already processed
-    elseif( c STREQUAL "all" )
+    elseif("${c}" STREQUAL "all" )
       get_property(all_components GLOBAL PROPERTY LLVM_COMPONENT_LIBS)
       list(APPEND expanded_components ${all_components})
     else()
@@ -265,7 +265,7 @@ function(llvm_map_components_to_libnames out_libs)
       list(FIND capitalized_libs LLVM${capitalized} lib_idx)
       if( lib_idx LESS 0 )
         # The component is unknown. Maybe is an omitted target?
-        is_llvm_target_library(${c} iltl_result OMITTED_TARGETS)
+        is_llvm_target_library("${c}" iltl_result OMITTED_TARGETS)
         if(iltl_result)
           # A missing library to a directly referenced omitted target would be bad.
           message(FATAL_ERROR "Library '${c}' is a direct reference to a target library for an omitted target.")
@@ -280,7 +280,7 @@ function(llvm_map_components_to_libnames out_libs)
         list(GET LLVM_AVAILABLE_LIBS ${lib_idx} canonical_lib)
         list(APPEND expanded_components ${canonical_lib})
       endif( lib_idx LESS 0 )
-    endif( c STREQUAL "native" )
+    endif("${c}" STREQUAL "native" )
   endforeach(c)

   set(${out_libs} ${expanded_components} PARENT_SCOPE)
--

From ec1a2a1faf94c29d64925f2be4d55643b5ba0954 Mon Sep 17 00:00:00 2001
From: Liviu Ionescu <ilg@livius.net>
Date: Sat, 5 Aug 2023 10:03:07 +0300
Subject: [PATCH] driver.cpp: get absolute path in SetInstallDir()

---
 clang/tools/driver/driver.cpp | 64 ++++++++++++++++++++++++++++++++++-
 1 file changed, 63 insertions(+), 1 deletion(-)

diff --git a/clang/tools/driver/driver.cpp b/clang/tools/driver/driver.cpp
index d74741233653..0b7601b5413c 100644
--- a/clang/tools/driver/driver.cpp
+++ b/clang/tools/driver/driver.cpp
@@ -56,6 +56,15 @@ using namespace clang;
 using namespace clang::driver;
 using namespace llvm::opt;

+#if defined(__linux__)
+#include <unistd.h>
+#elif defined(__APPLE__)
+#include <libproc.h>
+#include <unistd.h>
+#elif defined(__MINGW32__)
+#include <windows.h>
+#endif
+
 std::string GetExecutablePath(const char *Argv0, bool CanonicalPrefixes) {
   if (!CanonicalPrefixes) {
     SmallString<128> ExecutablePath(Argv0);
@@ -326,6 +335,56 @@ static void SetInstallDir(SmallVectorImpl<const char *> &argv,
   // path being a symlink.
   SmallString<128> InstalledPath(argv[0]);

+#if defined(__linux__)
+
+  char ProcessAbsolutePath[PATH_MAX];
+
+  int len = readlink("/proc/self/exe", ProcessAbsolutePath,
+                     sizeof(ProcessAbsolutePath) - 1);
+  if ( len <= 0 ) {
+    llvm::errs() << "Internal error: readlink(\"/proc/self/exe\") failed with "
+                 << strerror(errno) << "\n";
+    exit(1);
+  }
+
+  ProcessAbsolutePath[len] = 0;
+  InstalledPath = ProcessAbsolutePath;
+
+#elif defined(__APPLE__)
+
+  // The size must be higher than PROC_PIDPATHINFO_SIZE, otherwise the call
+  // fails with ENOMEM (12) - Cannot allocate memory.
+  // https://opensource.apple.com/source/Libc/Libc-498/darwin/libproc.c
+  char ProcessAbsolutePath[PROC_PIDPATHINFO_SIZE+1];
+
+  int len = proc_pidpath(getpid(), ProcessAbsolutePath,
+                         sizeof(ProcessAbsolutePath) - 1);
+  if ( len <= 0 ) {
+    llvm::errs() << "Internal error: proc_pidpath() failed with "
+                 << strerror(errno) << "\n";
+    exit(1);
+  }
+
+  ProcessAbsolutePath[len] = 0;
+  InstalledPath = ProcessAbsolutePath;
+
+#elif defined(__MINGW32__)
+
+  char ProcessAbsolutePath[PATH_MAX];
+
+  int len = GetModuleFileName(NULL, ProcessAbsolutePath,
+                              sizeof(ProcessAbsolutePath) - 1);
+  if ( len <= 0 ) {
+    llvm::errs() << "Internal error: GetModuleFileName() failed with "
+                 << strerror(errno) << "\n";
+    exit(1);
+  }
+
+  ProcessAbsolutePath[len] = 0;
+  InstalledPath = ProcessAbsolutePath;
+
+#else
+
   // Do a PATH lookup, if there are no directory components.
   if (llvm::sys::path::filename(InstalledPath) == InstalledPath)
     if (llvm::ErrorOr<std::string> Tmp = llvm::sys::findProgramByName(
@@ -336,9 +395,12 @@ static void SetInstallDir(SmallVectorImpl<const char *> &argv,
   if (CanonicalPrefixes)
     llvm::sys::fs::make_absolute(InstalledPath);

+#endif
+
   StringRef InstalledPathParent(llvm::sys::path::parent_path(InstalledPath));
-  if (llvm::sys::fs::exists(InstalledPathParent))
+  if (llvm::sys::fs::exists(InstalledPathParent)) {
     TheDriver.setInstalledDir(InstalledPathParent);
+  }
 }

 static int ExecuteCC1Tool(SmallVectorImpl<const char *> &ArgV) {
--
2.37.1 (Apple Git-137.1)

