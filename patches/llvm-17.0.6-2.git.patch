From 0c54d94b8721fcb75c54925a253c4dbb8071df4e Mon Sep 17 00:00:00 2001
From: Liviu Ionescu <ilg@livius.net>
Date: Thu, 5 Oct 2023 17:45:37 +0300
Subject: [PATCH] Darwin.cpp: add executable/../include/c++/v1 to include path

---
 clang/lib/Driver/ToolChains/Darwin.cpp | 13 +++++++++++++
 1 file changed, 13 insertions(+)

diff --git a/clang/lib/Driver/ToolChains/Darwin.cpp b/clang/lib/Driver/ToolChains/Darwin.cpp
index 65bd6c6a7eb3..323f8788699c 100644
--- a/clang/lib/Driver/ToolChains/Darwin.cpp
+++ b/clang/lib/Driver/ToolChains/Darwin.cpp
@@ -2491,6 +2491,19 @@ void DarwinClang::AddClangCXXStdlibIncludeArgs(
                    << "\"\n";
     }

+    // Check for the folder where the executable is located, if different.
+    if (getDriver().getInstalledDir() != getDriver().Dir) {
+      InstallBin = llvm::StringRef(getDriver().Dir);
+      llvm::sys::path::append(InstallBin, "..", "include", "c++", "v1");
+      if (getVFS().exists(InstallBin)) {
+        addSystemInclude(DriverArgs, CC1Args, InstallBin);
+        return;
+      } else if (DriverArgs.hasArg(options::OPT_v)) {
+        llvm::errs() << "ignoring nonexistent directory \"" << InstallBin
+                     << "\"\n";
+      }
+    }
+
     // Otherwise, check for (2)
     llvm::SmallString<128> SysrootUsr = Sysroot;
     llvm::sys::path::append(SysrootUsr, "usr", "include", "c++", "v1");
--
2.37.1 (Apple Git-137.1)

From 3121e1d24108030d4ac1601d0d24bdd0beeb66bd Mon Sep 17 00:00:00 2001
From: Liviu Ionescu <ilg@livius.net>
Date: Thu, 4 Apr 2024 13:23:50 +0300
Subject: [PATCH] os_version_check.c: use _availability_version_check on >= 11

---
 compiler-rt/lib/builtins/os_version_check.c | 13 +++++++++++++
 1 file changed, 13 insertions(+)

diff --git a/compiler-rt/lib/builtins/os_version_check.c b/compiler-rt/lib/builtins/os_version_check.c
index 182eabe7a6ae..5c4cb814e755 100644
--- a/compiler-rt/lib/builtins/os_version_check.c
+++ b/compiler-rt/lib/builtins/os_version_check.c
@@ -86,9 +86,14 @@ typedef Boolean (*CFStringGetCStringFuncTy)(CFStringRef, char *, CFIndex,
                                             CFStringEncoding);
 typedef void (*CFReleaseFuncTy)(CFTypeRef);

+// xPack
+#if defined(MAC_OS_X_VERSION_10_15) && \
+    MAC_OS_X_VERSION_MIN_REQUIRED > MAC_OS_X_VERSION_10_15
 extern __attribute__((weak_import))
 bool _availability_version_check(uint32_t count,
                                  dyld_build_version_t versions[]);
+#endif
+// xPack

 static void _initializeAvailabilityCheck(bool LoadPlist) {
   if (AvailabilityVersionCheck && !LoadPlist) {
@@ -97,9 +102,17 @@ static void _initializeAvailabilityCheck(bool LoadPlist) {
     return;
   }

+// xPack
+#if defined(MAC_OS_X_VERSION_10_15) && \
+    MAC_OS_X_VERSION_MIN_REQUIRED > MAC_OS_X_VERSION_10_15
   // Use the new API if it's is available.
   if (_availability_version_check)
     AvailabilityVersionCheck = &_availability_version_check;
+#else
+  AvailabilityVersionCheck = (AvailabilityVersionCheckFuncTy)dlsym(
+     RTLD_DEFAULT, "_availability_version_check");
+#endif
+// xPack

   if (AvailabilityVersionCheck && !LoadPlist) {
     // New API is supported and we're not being asked to load the plist,
--
2.39.3 (Apple Git-145)

