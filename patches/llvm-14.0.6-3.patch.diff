From e09a152f533df865cc86e303a5e625b52cefa12a Mon Sep 17 00:00:00 2001
From: Liviu Ionescu <ilg@livius.net>
Date: Sun, 11 Jul 2021 11:43:48 +0300
Subject: [PATCH] clang: add /Library/... to headers search path

Recent macOS releases also use:
/Library/Developer/CommandLineTools/usr/include/c++/v1
---
 clang/lib/Driver/ToolChains/Darwin.cpp | 12 ++++++++++++
 1 file changed, 12 insertions(+)

diff --git a/clang/lib/Driver/ToolChains/Darwin.cpp b/clang/lib/Driver/ToolChains/Darwin.cpp
index f7da3f187814..dcc3a9c00515 100644
--- a/clang/lib/Driver/ToolChains/Darwin.cpp
+++ b/clang/lib/Driver/ToolChains/Darwin.cpp
@@ -2240,6 +2240,7 @@ void DarwinClang::AddClangCXXStdlibIncludeArgs(
     // On Darwin, libc++ can be installed in one of the following two places:
     // 1. Alongside the compiler in         <install>/include/c++/v1
     // 2. In a SDK (or a custom sysroot) in <sysroot>/usr/include/c++/v1
+    // 3. In /Library/Developer/CommandLineTools/usr/include/c++/v1
     //
     // The precendence of paths is as listed above, i.e. we take the first path
     // that exists. Also note that we never include libc++ twice -- we take the
@@ -2272,6 +2273,17 @@ void DarwinClang::AddClangCXXStdlibIncludeArgs(
                    << "\"\n";
     }
 
+    // Otherwise, check for (3)
+    llvm::SmallString<128> CLT = 
+      StringRef("/Library/Developer/CommandLineTools/usr/include/c++/v1");
+    if (getVFS().exists(CLT)) {
+      addSystemInclude(DriverArgs, CC1Args, CLT);
+      return;
+    } else if (DriverArgs.hasArg(options::OPT_v)) {
+      llvm::errs() << "ignoring nonexistent directory \"" << CLT
+                   << "\"\n";
+    }
+
     // Otherwise, don't add any path.
     break;
   }
-- 
2.32.1 (Apple Git-133)


From 46dbd19afb79c5c81ccb87cee9e41ad668b35324 Mon Sep 17 00:00:00 2001
From: Sam McCall <sam.mccall@gmail.com>
Date: Mon, 21 Mar 2022 18:53:59 +0100
Subject: [PATCH] [clangd] Fix nullptr crash in AddUsing tweak on catch(...)

Fixes https://github.com/clangd/clangd/issues/1072
---
 .../clangd/refactor/tweaks/AddUsing.cpp             |  2 ++
 .../clangd/unittests/tweaks/AddUsingTests.cpp       | 13 +++++++++++++
 2 files changed, 15 insertions(+)

diff --git a/clang-tools-extra/clangd/refactor/tweaks/AddUsing.cpp b/clang-tools-extra/clangd/refactor/tweaks/AddUsing.cpp
index a75c4852bf751..5a4e1aa571a74 100644
--- a/clang-tools-extra/clangd/refactor/tweaks/AddUsing.cpp
+++ b/clang-tools-extra/clangd/refactor/tweaks/AddUsing.cpp
@@ -78,6 +78,8 @@ class UsingFinder : public RecursiveASTVisitor<UsingFinder> {
   }
 
   bool TraverseDecl(Decl *Node) {
+    if (!Node)
+      return true;
     // There is no need to go deeper into nodes that do not enclose selection,
     // since "using" there will not affect selection, nor would it make a good
     // insertion point.
diff --git a/clang-tools-extra/clangd/unittests/tweaks/AddUsingTests.cpp b/clang-tools-extra/clangd/unittests/tweaks/AddUsingTests.cpp
index b9b5cf49d2db0..662000a47b704 100644
--- a/clang-tools-extra/clangd/unittests/tweaks/AddUsingTests.cpp
+++ b/clang-tools-extra/clangd/unittests/tweaks/AddUsingTests.cpp
@@ -78,6 +78,19 @@ class cc {
   EXPECT_UNAVAILABLE(Header + "void fun() { one::two::f^f(); }");
 }
 
+TEST_F(AddUsingTest, Crash1072) {
+  // Used to crash when traversing catch(...)
+  // https://github.com/clangd/clangd/issues/1072
+  const char *Code = R"cpp(
+  namespace ns { class A; }
+  ns::^A *err;
+  void catchall() {
+    try {} catch(...) {}
+  }
+  )cpp";
+  EXPECT_AVAILABLE(Code);
+}
+
 TEST_F(AddUsingTest, Apply) {
   FileName = "test.cpp";
   struct {
